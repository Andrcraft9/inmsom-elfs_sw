! Global area for output
integer, parameter:: m1loc=mmm,     &                 !left  point number for local output
                     m2loc=mm,      &                 !right point number for local output
                     n1loc=nnn,     &                 !lower point number for local output
                     n2loc=nn,      &                 !upper point number for local output
                     nx_loc=m2loc-m1loc+1,      &     !local array dimension on X
                     ny_loc=n2loc-n1loc+1             !local array dimension on Y

! Local area for output
integer, parameter:: m1loc_local=50,      &                   !left  point number for local output
                     m2loc_local=250,     &                   !right point number for local output
                     n1loc_local=100,     &                   !lower point number for local output
                     n2loc_local=nn ,     &                   !upper point number for local output
                     nx_loc_local=m2loc_local - m1loc_local + 1,      &     !local array dimension on X
                     ny_loc_local=n2loc_local - n1loc_local + 1             !local array dimension on Y

! Flags for output
integer, parameter:: uv_output=0,  &
                    ssh_output=1,  &
                 energy_output=0,  &
                 points_output=0,  &
               uv_local_output=0,  &
              ssh_local_output=1,  &
           energy_local_output=0

integer, parameter:: grid_shift=1                     !0 - output velocity at model grid, 1 - interpolation to T-grid

! Sea level output in points
integer, parameter:: nloc_points = 2
real*8 :: lon_loc_points(nloc_points), lat_loc_points(nloc_points)
character*80 :: name_points(nloc_points)
data name_points/    'Test1',   'Test2'  /
data lon_loc_points/  32.0d0,   40.0d0   /
data lat_loc_points/  43.0d0,   42.0d0   /
